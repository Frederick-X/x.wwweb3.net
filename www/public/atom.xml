<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>FrederiX</title>
  
  <subtitle>All in web3. | https://x.wwweb3.net</subtitle>
  <link href="https://x.wwweb3.net/atom.xml" rel="self"/>
  
  <link href="https://x.wwweb3.net/"/>
  <updated>2022-06-13T14:42:10.000Z</updated>
  <id>https://x.wwweb3.net/</id>
  
  <author>
    <name>Frederick</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go + python 快速入门grpc</title>
    <link href="https://x.wwweb3.net/grpc-start/"/>
    <id>https://x.wwweb3.net/grpc-start/</id>
    <published>2022-06-13T14:42:10.000Z</published>
    <updated>2022-06-13T14:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>gRPC是一个由Google开发的高性能、开源、通用的远程过程调用（RPC）框架。其面向移动应用开发并给予HTTP/2协议标准以及ProtoBuf(ProtocolBuffers)序列化协议设计开发。</p><span id="more"></span><p>gRPC可以高效地连接数据中心内和之间的服务，并可插拔地支持负载平衡、跟踪、运行状况检查和身份验证。它还适用于最后一英里的分布式计算，将设备、移动应用程序和浏览器连接到后端服务。目前提供C、JAVA和Go语言版本，分别是grpc、grpc-java、grpc-go。</p><div class="tag-plugin tabs" align="center"id="tab_1""><ul class="nav-tabs"><li class="tab"><a href="#tab_1-1">grpc</a></li><li class="tab"><a href="#tab_1-2">grpc-java</a></li><li class="tab active"><a href="#tab_1-3">grpc-go</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab_1-1"><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/grpc/grpc"><img src="https://github-readme-stats.vercel.app/api/pin/?username=grpc&repo=grpc&&show_owner=true"/></a></div></div><div class="tab-pane" id="tab_1-2"><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/grpc/grpc-java"><img src="https://github-readme-stats.vercel.app/api/pin/?username=grpc&repo=grpc-java&&show_owner=true"/></a></div></div><div class="tab-pane active" id="tab_1-3"><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/grpc/grpc-go"><img src="https://github-readme-stats.vercel.app/api/pin/?username=grpc&repo=grpc-go&&show_owner=true"/></a></div></div></div></div><h2 id="grpc与protocol-buffers简介">gRPC与Protocol Buffers简介</h2><p>本小节介绍gRPC和protocol buffers。gRPC可以使用protocolbuffers作为其接口定义语言（Interface Definition Language,IDL）和底层消息交换格式。</p><h3 id="grpc">gRPC</h3><p>在gRPC中，客户端程序可以直接像调用本地方法一般调用另一台机器上的服务器程序中的方法。与常见的RPC系统一样，gRPC通过定义服务，定义可以使用参数和返回类型远程调用的方法。在服务器端，服务器实现此接口并运行gRPC服务器来处理客户端调用。在客户端，客户端有一个<strong>stub</strong>，提供与服务器相同的方法。</p><div class="tag-plugin image"><div class="image-bg"><img src="landing-2.svg" alt="gRPC数据交互示意图"/></div><div class="image-meta"><span class="image-caption center">gRPC数据交互示意图</span></div></div><h3 id="protocol-buffers">Protocol Buffers</h3><p>gRPC默认使用Protocol Buffers。ProtocolBuffers是由Google开源的序列化结构化数据的成熟机制，其压缩比高，传输速度快，序列化/反序列化性能较Json、XML等快2-100倍。除性能优势外，PtotocolBuffers还有易于使用（自动生成序列化/反序列化代码）、维护成本低（只需维护proto文件）、向后兼容（无需破坏旧格式）、加密性好、跨平台（支持多种主流语言）等优势。</p><p>Protocol Buffers的缺点主要体现在其通用型较差，相比于Json，PtotocolBuffers需要专门的解析工具，此外，ProtocolBuffers自解释性差，只有通过proto文件才能了解其数据结构。</p><h2 id="python中使用protocol-buffers">python中使用protocol buffers</h2><p>安装依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install grpcio</span><br><span class="line">pip install grpcio-tools</span><br></pre></td></tr></table></figure><p>Protocol Buffers（以下简称ProtoBuf）有ProtoBuf2和ProtoBuf3两个版本，gRPC官网更加推荐使用ProtoBuf3:</p><blockquote><p>... In general, while you can use proto2 (the current defaultprotocol buffers version), we recommend that you use proto3 with gRPC asit lets you use the full range of gRPC-supported languages, as well asavoiding compatibility issues with proto2 clients talking to proto3servers and vice versa.</p></blockquote><p>ProtoBuf有专门的定义格式。使用ProtoBuf需要在扩展名为<code>.proto</code>的文本文件中定义期望序列化的数据结构。举一个例子，文件名为<code>hello.proto</code>:</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>; <span class="comment">// name 表示名称， name的编号是1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，可用如下命令在当前目录生成<code>hello.proto</code>对应的python文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m grpc_tools.protoc --python_out=. --grpc_python_out=. -I. hello.proto</span><br></pre></td></tr></table></figure><p>执行上面的命令后，会生成<code>hello_pb2.py</code>和<code>hello_pb2_grpc.py</code>两个文件。</p><p>至此，当前项目目录的结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── main.py</span><br><span class="line">└── proto</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── hello.proto</span><br><span class="line">    ├── hello_pb2.py</span><br><span class="line">    └── hello_pb2_grpc.py</span><br></pre></td></tr></table></figure><blockquote><p>注：此时<code>hello.proto</code>已经完成了它的使命，理论上可以被删除。</p></blockquote><p>在<code>main.py</code>中编写如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> proto <span class="keyword">import</span> hello_pb2</span><br><span class="line"></span><br><span class="line">request = hello_pb2.HelloRequest()</span><br><span class="line">request.name = <span class="string">&quot;World&quot;</span></span><br><span class="line"></span><br><span class="line">res_str = request.SerializeToString()</span><br><span class="line"><span class="built_in">print</span>(res_str)</span><br><span class="line"></span><br><span class="line">request2 = hello_pb2.HelloRequest()</span><br><span class="line">request2.ParseFromString(res_str)</span><br><span class="line"><span class="built_in">print</span>(request2.name)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b&#x27;\n\x05World&#x27;</span><br><span class="line">World</span><br></pre></td></tr></table></figure><h2 id="python-grpc开发">python grpc开发</h2><p>这里以gRPC GitHub仓库的helloworld example做示例。</p><p><code>helloworld.proto</code>文件内容如下：</p><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Copyright 2015 gRPC authors.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment">// you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment">// You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//     http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment">// distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment">// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment">// See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment">// limitations under the License.</span></span><br><span class="line"></span><br><span class="line">syntax = <span class="string">&quot;proto3&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">option</span> java_multiple_files = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">option</span> java_package = <span class="string">&quot;io.grpc.examples.helloworld&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> java_outer_classname = <span class="string">&quot;HelloWorldProto&quot;</span>;</span><br><span class="line"><span class="keyword">option</span> objc_class_prefix = <span class="string">&quot;HLW&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> helloworld;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The greeting service definition.</span></span><br><span class="line"><span class="keyword">service </span><span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="comment">// Sends a greeting</span></span><br><span class="line">  <span class="function"><span class="keyword">rpc</span> SayHello (HelloRequest) <span class="keyword">returns</span> (HelloReply) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The request message containing the user&#x27;s name.</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloRequest</span> &#123;</span><br><span class="line">  <span class="type">string</span> name = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The response message containing the greetings</span></span><br><span class="line"><span class="keyword">message </span><span class="title class_">HelloReply</span> &#123;</span><br><span class="line">  <span class="type">string</span> message = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;gRPC是一个由Google开发的高性能、开源、通用的远程过程调用（RPC）框架。其面向移动应用开发并给予HTTP/2协议标准以及ProtoBuf(Protocol
Buffers)序列化协议设计开发。&lt;/p&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://x.wwweb3.net/tags/go/"/>
    
    <category term="python" scheme="https://x.wwweb3.net/tags/python/"/>
    
    <category term="grpc" scheme="https://x.wwweb3.net/tags/grpc/"/>
    
    <category term="微服务" scheme="https://x.wwweb3.net/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>go语言rpc开发</title>
    <link href="https://x.wwweb3.net/go-rpc/"/>
    <id>https://x.wwweb3.net/go-rpc/</id>
    <published>2022-06-12T16:37:44.000Z</published>
    <updated>2022-06-12T16:37:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>go语言内置了<code>net/rpc</code>包，本文通过几个案例介绍<code>net/rpc</code>包的使用。</p><span id="more"></span><h2 id="快速开始">快速开始</h2><details class="tag-plugin folding"  open><summary><span>Server</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloService <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloService)</span></span> Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="comment">// 返回值是通过修改reply的值</span></span><br><span class="line">*reply = <span class="string">&quot;Hello, &quot;</span> + request</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = rpc.RegisterName(<span class="string">&quot;HelloService&quot;</span>, &amp;HelloService&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line">rpc.ServeConn(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>Client</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client, err := rpc.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;connect err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply *<span class="type">string</span> = <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">err = client.Call(<span class="string">&quot;HelloService.Hello&quot;</span>, <span class="string">&quot;world!&quot;</span>, reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;call err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(*reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="关于跨语言调用">关于跨语言调用</h2><p>go语言rpc的序列化协议是使用go语言特有的Gob编码，这限制了跨语言的调用。而几乎所有的主流语言都支持json，这个例子介绍将go语言的序列化协议改为json，并使用python调用这个rpc服务，实现rpc的跨语言调用。</p><details class="tag-plugin folding"  open><summary><span>Server</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloService <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloService)</span></span> Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">*reply = <span class="string">&quot;Hello, &quot;</span> + request</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">err = rpc.RegisterName(<span class="string">&quot;HelloService&quot;</span>, &amp;HelloService&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> rpc.ServeCodec(jsonrpc.NewServerCodec(conn))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding" ><summary><span>Go Client</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">conn, err := net.Dial(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;connect err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> reply *<span class="type">string</span> = <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">client := rpc.NewClientWithCodec(jsonrpc.NewClientCodec(conn))</span><br><span class="line">err = client.Call(<span class="string">&quot;HelloService.Hello&quot;</span>, <span class="string">&quot;world!&quot;</span>, reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;call err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(*reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>Python Client</span></summary><div class="body"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">request = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [<span class="string">&quot;world!&quot;</span>],</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;HelloService.Hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">client = socket.create_connection((<span class="string">&quot;localhost&quot;</span>, <span class="number">1234</span>))</span><br><span class="line">client.sendall(json.dumps(request).encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取服务器返回的数据</span></span><br><span class="line">rsp = client.recv(<span class="number">4096</span>)</span><br><span class="line">rsp = json.loads(rsp.decode())</span><br><span class="line"><span class="built_in">print</span>(rsp)</span><br></pre></td></tr></table></figure><p><code>{'id': 0, 'result': 'Hello, world!', 'error': None}</code></p></div></details><h2 id="基于http的rpc">基于http的rpc</h2><details class="tag-plugin folding"  open><summary><span>Server</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;io&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc/jsonrpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloService <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloService)</span></span> Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">*reply = <span class="string">&quot;Hello, &quot;</span> + request</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := rpc.RegisterName(<span class="string">&quot;HelloService&quot;</span>, &amp;HelloService&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/jsonrpc&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> conn io.ReadWriteCloser = <span class="keyword">struct</span> &#123;</span><br><span class="line">io.Writer</span><br><span class="line">io.ReadCloser</span><br><span class="line">&#125;&#123;</span><br><span class="line">ReadCloser: r.Body,</span><br><span class="line">Writer:     w,</span><br><span class="line">&#125;</span><br><span class="line">rpc.ServeCodec(jsonrpc.NewServerCodec(conn))</span><br><span class="line">&#125;)</span><br><span class="line">http.ListenAndServe(<span class="string">&quot;:1234&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>Python Client</span></summary><div class="body"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">request = &#123;</span><br><span class="line">    <span class="string">&quot;id&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">&quot;params&quot;</span>: [<span class="string">&quot;world!&quot;</span>],</span><br><span class="line">    <span class="string">&quot;method&quot;</span>: <span class="string">&quot;HelloService.Hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">rsp = requests.post(<span class="string">&quot;http://localhost:1234/jsonrpc&quot;</span>, json=request)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rsp.text)</span><br></pre></td></tr></table></figure><p><code>{"id":0,"result":"Hello, world!","error":null}</code></p></div></details><h2 id="改进rpc调用">改进rpc调用</h2><p>首先我们回顾一下上面的例子。在上面的例子中，客户端通过<code>client.Call("HelloService.Hello","world!", reply)</code>实现函数的调用。我们不仅需要记住函数的名字<code>HelloService.Hello</code>, 而且函数参数的传递方式也与普通函数的调用有一定的差异。</p><p>这一节就以上问题做进一步优化。</p><p>项目目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── GoProject</span><br><span class="line">│   ├── go.mod</span><br><span class="line">│   ├── go.sum</span><br><span class="line">│   ├── helloworld_rpc</span><br><span class="line">│   │   ├── client</span><br><span class="line">│   │   │   └── client.go</span><br><span class="line">│   │   ├── client_proxy</span><br><span class="line">│   │   │   └── client_proxy.go</span><br><span class="line">│   │   ├── handler</span><br><span class="line">│   │   │   └── hanlder.go</span><br><span class="line">│   │   ├── server</span><br><span class="line">│   │   │   └── server.go</span><br><span class="line">│   │   └── server_proxy</span><br><span class="line">│   │       └── server_proxy.go</span><br></pre></td></tr></table></figure><details class="tag-plugin folding"  open><summary><span>hanlder.go</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> handler</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> HelloServiceName = <span class="string">&quot;handler/HelloService&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloService <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *HelloService)</span></span> Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">*reply = <span class="string">&quot;Hello, &quot;</span> + request</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>client_proxy.go</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> client_proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoProject/helloworld_rpc/handler&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloServiceStub <span class="keyword">struct</span> &#123;</span><br><span class="line">*rpc.Client</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewHelloServiceClient</span><span class="params">(protocol, address <span class="type">string</span>)</span></span> HelloServiceStub &#123;</span><br><span class="line">conn, err := rpc.Dial(protocol, address)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;connect err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> HelloServiceStub&#123;conn&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *HelloServiceStub)</span></span> Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line">err := c.Call(handler.HelloServiceName+<span class="string">&quot;.Hello&quot;</span>, request, reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>server_proxy.go</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> server_proxy</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoProject/helloworld_rpc/handler&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> HelloServicer <span class="keyword">interface</span> &#123;</span><br><span class="line">Hello(request <span class="type">string</span>, reply *<span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterHelloService</span><span class="params">(srv HelloServicer)</span></span> <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> rpc.RegisterName(handler.HelloServiceName, srv)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>server.go</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoProject/helloworld_rpc/handler&quot;</span></span><br><span class="line"><span class="string">&quot;GoProject/helloworld_rpc/server_proxy&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"><span class="string">&quot;net/rpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">listen, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">server_proxy.RegisterHelloService(&amp;handler.HelloService&#123;&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">conn, err := listen.Accept()</span><br><span class="line">rpc.ServeConn(conn)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding"  open><summary><span>client.go</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;GoProject/helloworld_rpc/client_proxy&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">client := client_proxy.NewHelloServiceClient(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:1234&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reply *<span class="type">string</span> = <span class="built_in">new</span>(<span class="type">string</span>)</span><br><span class="line">err := client.Hello(<span class="string">&quot;world!&quot;</span>, reply)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(<span class="string">&quot;call err&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(*reply)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;go语言内置了&lt;code&gt;net/rpc&lt;/code&gt;包，本文通过几个案例介绍&lt;code&gt;net/rpc&lt;/code&gt;包的使用。&lt;/p&gt;</summary>
    
    
    
    
    <category term="go" scheme="https://x.wwweb3.net/tags/go/"/>
    
    <category term="rpc" scheme="https://x.wwweb3.net/tags/rpc/"/>
    
  </entry>
  
  <entry>
    <title>Gin Web Framework 从入门到精通</title>
    <link href="https://x.wwweb3.net/gin-zero-to-one/"/>
    <id>https://x.wwweb3.net/gin-zero-to-one/</id>
    <published>2022-06-03T15:40:41.000Z</published>
    <updated>2022-06-03T15:40:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>Gin是用Go（Golang）编写的HTTPWeb框架。它具有类似Martini的API，但性能比Martini快40倍。如果你追求极致的性能，不妨试试Gin。</p><span id="more"></span><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/gin-gonic/gin"><img src="https://github-readme-stats.vercel.app/api/pin/?username=gin-gonic&repo=gin&theme=dark&show_owner=true"/></a></div><h2 id="快速开始">快速开始</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/ping&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;message&quot;</span>: <span class="string">&quot;pong&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details class="tag-plugin folding" ><summary><span>gin.Default()和gin.New()的区别</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">r := gin.New()</span><br></pre></td></tr></table></figure><p>二者之处在于使用<code>gin.Default()</code>会自动开启<code>logger()</code>和<code>Recovery()</code>。</p></div></details><details class="tag-plugin folding" ><summary><span>配置GET，POST，PATCH等HTTP方法</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/sthGet&quot;</span>, getting)</span><br><span class="line">r.POST(<span class="string">&quot;/sthPost&quot;</span>, posting)</span><br><span class="line">r.PUT(<span class="string">&quot;/sthPut&quot;</span>, putting)</span><br><span class="line">r.DELETE(<span class="string">&quot;/sthDelete&quot;</span>, deleting)</span><br><span class="line">r.PATCH(<span class="string">&quot;/sthPatch&quot;</span>, patching)</span><br><span class="line">r.HEAD(<span class="string">&quot;/sthHead&quot;</span>, head)</span><br><span class="line">r.OPTIONS(<span class="string">&quot;sthOptions&quot;</span>, options)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding" ><summary><span>路由分组</span></summary><div class="body"><p>随着业务的复杂，API数量也随之增多，通常需要对路由进行分组（如接口的版本管理）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">r := gin.Default()</span><br><span class="line">v1 := r.Group(<span class="string">&quot;/v1&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">v1.POST(<span class="string">&quot;/login&quot;</span>, loginFunc)</span><br><span class="line">v1.POST(<span class="string">&quot;/submit&quot;</span>, submitFunc)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding" ><summary><span>匹配url中的变量</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">book := r.Group(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">book.GET(<span class="string">&quot;/:id&quot;</span>, bookDetail)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookDetail</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>: id,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding" ><summary><span>匹配url中的路径</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">book := r.Group(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">book.GET(<span class="string">&quot;/:id/*file&quot;</span>, bookDetail)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookDetail</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">id := c.Param(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">file := c.Param(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:   id,</span><br><span class="line"><span class="string">&quot;file&quot;</span>: file,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url: </span><br><span class="line">http://127.0.0.1:8080/book/2/usr/books/mybook.txt</span><br><span class="line">output:</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;file&quot;: &quot;/usr/books/mybook.txt&quot;,</span><br><span class="line">    &quot;id&quot;: &quot;2&quot;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="入门">入门</h2><h3id="shouldbinduri实现uri的模式约束">ShouldBindUri实现uri的模式约束</h3><p>在<ahref="#快速开始">快速开始</a>末尾处的例子介绍了如何获取url中的变量。而这些例子都无法约束参数的类型。</p><p>下面的例子介绍使用ShouldBindUri方法提取uri中的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">ID   <span class="type">int</span>    <span class="string">`uri:&quot;id&quot; binding:&quot;required&quot;`</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`uri:&quot;name&quot; binding:&quot;required&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">book := r.Group(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">book.GET(<span class="string">&quot;/:id/:name&quot;</span>, bookDetail)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookDetail</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> book Book</span><br><span class="line"><span class="keyword">if</span> err := c.ShouldBindUri(&amp;book); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.Status(<span class="number">404</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:   book.ID,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: book.Name,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="从get和post中获取参数">从GET和POST中获取参数</h3><details class="tag-plugin folding" ><summary><span>获取GET参数</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">book := r.Group(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//url: http://127.0.0.1:8080/book?id=2&amp;name=mybook</span></span><br><span class="line">book.GET(<span class="string">&quot;&quot;</span>, bookDetail)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">bookDetail</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">bookId := c.Query(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">bookName := c.DefaultQuery(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;None&quot;</span>) <span class="comment">// defaultValue is needed</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:   bookId,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: bookName,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><details class="tag-plugin folding" ><summary><span>获取POST参数</span></summary><div class="body"><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line">book := r.Group(<span class="string">&quot;/book&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">book.POST(<span class="string">&quot;&quot;</span>, createBook)</span><br><span class="line">&#125;</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createBook</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">bookId := c.PostForm(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">bookName := c.DefaultPostForm(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;None&quot;</span>) <span class="comment">// defaultValue is needed</span></span><br><span class="line">c.JSON(http.StatusOK, gin.H&#123;</span><br><span class="line"><span class="string">&quot;id&quot;</span>:   bookId,</span><br><span class="line"><span class="string">&quot;name&quot;</span>: bookName,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details>]]></content>
    
    
    <summary type="html">&lt;p&gt;Gin是用Go（Golang）编写的HTTP
Web框架。它具有类似Martini的API，但性能比Martini快40倍。如果你追求极致的性能，不妨试试Gin。&lt;/p&gt;</summary>
    
    
    
    
    <category term="gin" scheme="https://x.wwweb3.net/tags/gin/"/>
    
    <category term="golang" scheme="https://x.wwweb3.net/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>DS_Store文件解析工具</title>
    <link href="https://x.wwweb3.net/python-dsstore-parser/"/>
    <id>https://x.wwweb3.net/python-dsstore-parser/</id>
    <published>2022-06-02T18:57:20.000Z</published>
    <updated>2022-06-03T05:13:49.682Z</updated>
    
    <content type="html"><![CDATA[<p>在Mac系统的文件夹下常常会出现一个名为.DS_Store的隐藏文件。</p><p>本文介绍了.DS_Store的作用以及该文件泄露可能导致的潜在风险，最后介绍如何使用Python-dsstore库解析.DS_Store文件。</p><span id="more"></span><h2 id="什么是ds_store">什么是DS_Store</h2><p>桌面服务存储（Desktop ServicesStore，DS_Store），是一种由macOS系统自动创建的隐藏文件，存在于每一个用「访达」打开过的文件夹下面。</p><p>虽然不能在「访达」中直接看到它，但是通过「终端」App，可以输入<code>ls-la</code>命令列出。同时，通过<code>file</code>命令，可以显示出其文件类型，即“DesktopServices Store”。</p><h2 id="ds_store存储什么信息">DS_Store存储什么信息</h2><p>DS_Store文件的主要作用，是存储当前文件夹在桌面显示相关方面的一些自定义属性，包括文件图标的位置、文件夹上次打开时窗口的大小、展现形式和位置等。这有助于保留为特定文件夹配置的设置，例如，将桌面文件夹设置为查看按名称排序的图标，同时将下载文件夹配置为将文件显示为列表并按日期排序，最近修改的先显示。</p><h2 id="由ds_store引起的安全问题">由DS_Store引起的安全问题</h2><p>DS_Store中可以解析出文件夹下的目录信息。由于它本身是一个隐藏文件，所以常常会被忽视，如在开发过程中有时会忘记将.DS_Strore加入.gitignore文件中，导致.DS_Strore文件被git跟踪。若将DS_Store带到生产环境中，可能导致安全隐患。具体来说，对于一个网站，只要攻击者获得了DS_Store文件，他就可能通过解析工具解析出与网站相关的目录与文件名。攻击者可通过解析这一文件，可能会发现数据库备份文件、配置文件以及一些缓存文件，甚至是密钥等。</p><p>此外，对于希望在网络中隐藏真实身份的用户来说，在某些情况下文件名包可能会我们的姓名、ID等个人信息。DS_Store文件的泄漏可能导致别有用心的人知晓我们的真实身份。</p><h2id="用python-dsstore库解析ds_store">用Python-dsstore库解析DS_Store</h2><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/gehaxelt/Python-dsstore"><img src="https://github-readme-stats.vercel.app/api/pin/?username=gehaxelt&repo=Python-dsstore&&show_owner=true"/></a></div><p>该库的作者在文章 <ahref="https://0day.work/parsing-the-ds_store-file-format/">“Parsing the.DS_Store file format”</a>中更加详细地介绍了DS_Store文件的相关信息与该库实现的技术细节。</p><p>该库的使用十分简单。</p><p>首先，把代码<code>clone</code>到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/gehaxelt/Python-dsstore.git</span><br></pre></td></tr></table></figure><p>在Python环境下运行<code>main.py</code>即可，参数是DS_Store文件的路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python main.py samples/.DS_Store.ctf</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在Mac系统的文件夹下常常会出现一个名为.DS_Store的隐藏文件。&lt;/p&gt;
&lt;p&gt;本文介绍了.DS_Store的作用以及该文件泄露可能导致的潜在风险，最后介绍如何使用Python-dsstore库解析.DS_Store文件。&lt;/p&gt;</summary>
    
    
    
    
    <category term="工具" scheme="https://x.wwweb3.net/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="信息安全" scheme="https://x.wwweb3.net/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Ethereum Whitepaper 中文版</title>
    <link href="https://x.wwweb3.net/Ethereum-Whitepaper-zh-CN/"/>
    <id>https://x.wwweb3.net/Ethereum-Whitepaper-zh-CN/</id>
    <published>2022-06-02T17:22:41.000Z</published>
    <updated>2022-06-12T09:01:43.690Z</updated>
    
    <content type="html"><![CDATA[<p>以太坊项目于2015年启动。这篇介绍性论文最初由以太坊的创始人VitalikButerin于2014年发布。与诸多社区驱动的开源项目相似，以太坊自发布以来持续迭代。</p><p>尽管已过去多年，但我们仍然保留这篇论文，因为它仍然是以太坊及其愿景的有用参考和准确表示。</p><span id="more"></span><p>以太坊白皮书原始链接：</p><div class="tag-plugin link dis-select"><a class="link-card plain" title="Ethereum&nbsp;Whitepaper" href="https://ethereum.org/zh/whitepaper" target="_blank" rel="external nofollow noopener noreferrer"><div class="left"><span class="title">Ethereum&nbsp;Whitepaper</span><span class="desc fs12">https://ethereum.org/zh/whitepaper</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg"></div></div></a></div><p><ahref="https://ethereum.org/669c9e2e2027310b6b3cdce6e1c52962/Ethereum_Whitepaper_-_Buterin_2014.pdf">以PDF格式打开以太坊白皮书</a></p><h2id="新一代智能合约与去中心化应用平台">新一代智能合约与去中心化应用平台</h2><p>中本聪（SatoshiNakamoto）在2009年开发的比特币被视为货币领域的重大发展，是首个既没有背书或“内在价值”（“<ahref="https://bitcoinmagazine.com/business/op-ed-debunking-bitcoin-myths-the-intrinsic-value-fallacy">intrinsicvalue</a>”）又没有集中发行人或控制人的数字资产的案例。而比特币的另一个更重要的部分，即承载其分布式共识的底层区块链技术，正引起人们的广泛关注。区块链技术的常见应用包括使用链上数字资产表示自定义货币和金融工具("<ahref="https://docs.google.com/a/buterin.com/document/d/1AnkP_cVZTCMLIzw4DvsW6M8Q2JC0lIzrTLuoWu2z1BE/edit">coloredcoins</a>")，底层物理设备的所有权("<ahref="https://en.bitcoin.it/wiki/Smart_Property">smartproperty</a>")，域名等不可替代资产 ("<ahref="http://namecoin.org/">Namecoin</a>")，以及更复杂的应用程序，包括由实现任意规则的代码直接控制数字资产("<ahref="http://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/idea.html">smartcontracts</a>") 甚至是基于区块链的分布式自治组织（DAO, <ahref="http://bitcoinmagazine.com/7050/bootstrapping-a-decentralized-autonomous-corporation-part-i/">decentralizedautonomous organizations</a>）。以太坊的愿景是打造一个具有内置成熟的图灵完备编程语言的区块链。该语言可用于创建“契约”，用于对任意状态转换函数进行编码。以太坊能够使用户能够通过代码编写逻辑来创建上述提及的以及其它未曾想到的系统。</p><h2 id="比特币及现有概念简介">比特币及现有概念简介</h2><h3 id="历史">历史</h3><p>去中心化数字货币的概念以及诸如财产登记等应用已经存在了几十年。20世纪80年代和90年代的匿名电子现金协议主要基于于一种被称为盲签（Chaumianblinding）的加密原语，提供了具有高度隐私的货币。但因为这项技术依赖于一个集中的中介，导致该未能获得足够多的重视。1998年，WeiDai的 <ahref="http://www.weidai.com/bmoney.txt">b-money</a>首次提出通过引入解决计算难题与分布式共识来创造货币，但并未给出分布式共识的实施细节。2005年，HalFinney引入了“可重复使用的工作证明”（"<ahref="https://nakamotoinstitute.org/finney/rpow/">reusable proofs ofwork</a>"）的概念。它同时借鉴了b-money和AdamBack的难以计算的的Hashcash问题，创造了加密货币（cryptocurrency）的概念。但是由于它依赖于可信的计算作为后端，还是未能达到理想的效果。2009年，中本聪将通过公钥加密管理所有权的技术与跟踪谁拥有硬币的共识算法相结合，称为“工作证明”（“proof-of-work”），首次在实践中实施了分布式货币。</p><p>工作证明背后的机制是空前的突破，因为它同时解决了两个问题。其一，它提供了一个简单且适度有效的共识算法，允许网络中的节点为比特币账本的状态共同商定一组更新。其二，它给出了一个允许自由进入共识过程的机制，解决了决定谁可以影响共识的问题，同时能够避免sybil攻击。为此，它用经济壁垒取代了正式的参与壁垒，例如要求在特定名单上注册为唯一实体，共识投票过程中单个节点的权重与节点带来的计算能力成正比。从那时起，有人还提出了一种称为权益证明的替代方法，即计算节点的权重与其货币持有量成比例，而非计算资源。对这两种方法的优劣的讨论超出了本文的范围，但应该指出，这两种方法都可以用作加密货币的支柱。</p><h3 id="比特币作为一个状态转移系统">比特币作为一个状态转移系统</h3><div class="tag-plugin image"><div class="image-bg"><img src="ethereum-state-transition.png"/></div></div><p>从技术角度来看，比特币等加密货币的账本可以被视为一个状态转移系统，包括所有现有比特币的所有状态组成的“状态”集合，和“状态转换函数”。状态转换函数接受一个状态和一个事务作为输入，并输出一个新的状态。</p><p>以经典的银行系统为例，“状态”就是一个资产负债表，转换是一个将<spanclass="math inline">\(X\)</span>美元从<spanclass="math inline">\(A\)</span>转移到<spanclass="math inline">\(B\)</span>的请求，状态转移函数将<spanclass="math inline">\(A\)</span>帐户中的价值减少<spanclass="math inline">\(X\)</span>美元，将<spanclass="math inline">\(B\)</span>帐户中的价值增加<spanclass="math inline">\(X\)</span>美元。 若<spanclass="math inline">\(A\)</span>中的余额少于<spanclass="math inline">\(X\)</span>美元，状态转移函数将返回Error。以上过程可以形式化定义如下：</p><p><span class="math display">\[APPLY(S, TX) -&gt; S&#39;\ or \ERROR\]</span></p><p>在上述定义的银行系统中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">APPLY(&#123; Alice: $50, Bob: $50 &#125;,&quot;send $20 from Alice to Bob&quot;) </span><br><span class="line">= &#123; Alice: $30, Bob: $70 &#125;</span><br></pre></td></tr></table></figure><p>但：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">APPLY(&#123; Alice: $50, Bob: $50 &#125;,&quot;send $70 from Alice to Bob&quot;) = ERROR</span><br></pre></td></tr></table></figure><p>在比特币中，“状态”指所有已被铸造而尚未被消费的硬币的集合，即未用交易输出（unspenttransactionoutputs，UTXO），每个UTXO都有一个面值和一个所有者（由一个20字节的地址定义，本质上是一个加密的公钥<ahref="#fn1" class="footnote-ref" id="fnref1"role="doc-noteref"><sup>1</sup></a>)。一个转换包含一个或多个输入，每个输入都包含对现有UTXO对引用和与所有者地址关联的私钥生成的加密签名。一个转换也包含多个输出，每个输出都包含要添加到状态的新UTXO。</p><p>状态转换函数<span class="math inline">\(APPLY(S，TX)\toS&#39;\)</span>可大致定义如下：</p><ol type="1"><li>对于<span class="math inline">\(TX\)</span>中的每一个输入：<ul><li>若引用的UTXO不在<spanclass="math inline">\(S\)</span>中，则返回<spanclass="math inline">\(Error\)</span>.</li><li>若签名与UTXO的所有者不匹配，则返回<spanclass="math inline">\(Error\)</span>.</li></ul></li><li>如果所有输入UTXO的面额之和小于所有输出UTXO的面额之和，则返回<spanclass="math inline">\(Error\)</span>.</li><li>返回完成UTXO转入/转出后的<spanclass="math inline">\(S\)</span>.</li></ol><p>第一步的前半部分阻止交易发起人消费不存在的币，后半部分阻止交易发起人花费不属于自己的币。第二步确保价值守恒（theconservation ofvalue）。为了将其用于支付，协议如下。假设Alice想向Bob发送11.7BTC。首先，Alice将寻找一套她拥有的可用UTXO，总计至少为11.7BTC。事实上，Alice无法准确获得11.7BTC；假设她能得到的最小值是6+4+2=12。然后，她用这三个输入和两个输出创建一个转换。第一个输出将是11.7BTC，Bob的地址是其所有者，第二个输出将是剩余的0.3BTC“更改”，所有者是Alice本人。</p><h3 id="挖矿">挖矿</h3><div class="tag-plugin image"><div class="image-bg"><img src="ethereum-blocks.png"/></div></div><p>如果我们有一个值得信赖的集中式服务，该系统的实现是非常简单的，只需按照描述进行编码，使用集中服务器的硬盘驱动器来跟踪状态即可。但比特币系统是要尝试建立一个分布式的货币系统，因此我们需要将状态转台转换系统与共识系统相结合，以确保每一个人都认可交易顺序。比特币的分布式共识机制要求网络中的节点不断城市生成称为“块”的交易包。</p><section class="footnotes footnotes-end-of-document"role="doc-endnotes"><hr /><ol><li id="fn1"role="doc-endnote"><p>老练的读者可能会注意到，比特币地址是椭圆曲线公钥的哈希，而不是公钥本身。然而事实上，将公钥的哈希称为公钥是完全合法的加密术语。这是因为比特币的加密可以被视为一种惯用的数字签名算法，其中公钥由ECCpubkey的哈希组成，签名由与ECC签名拼接的ECCpubkey组成。验证算法根据作为公钥的ECC pubkey哈希检查签名中的ECCpubkey，然后根据ECC pubkey验证ECC签名。<a href="#fnref1"class="footnote-back" role="doc-backlink">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;以太坊项目于2015年启动。这篇介绍性论文最初由以太坊的创始人Vitalik
Buterin于2014年发布。与诸多社区驱动的开源项目相似，以太坊自发布以来持续迭代。&lt;/p&gt;
&lt;p&gt;尽管已过去多年，但我们仍然保留这篇论文，因为它仍然是以太坊及其愿景的有用参考和准确表示。&lt;/p&gt;</summary>
    
    
    
    <category term="web3" scheme="https://x.wwweb3.net/categories/web3/"/>
    
    
    <category term="以太坊" scheme="https://x.wwweb3.net/tags/%E4%BB%A5%E5%A4%AA%E5%9D%8A/"/>
    
  </entry>
  
  <entry>
    <title>Stellar主题实验室 🪐</title>
    <link href="https://x.wwweb3.net/hello-world/"/>
    <id>https://x.wwweb3.net/hello-world/</id>
    <published>2018-02-02T15:45:00.000Z</published>
    <updated>2022-06-03T14:56:21.754Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <ahref="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <ahref="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><p>新版标签插件和 Hexo官方的标签插件统一使用空格分隔，所以如果参数内容中需要出现的空格被意外分隔开了的时候，请使用<code>&amp;nbsp;</code>代替。为了方便理解，本文档语法格式中的可选参数用方括号括起来，键值对参数用冒号分隔开，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image src description [download:bool/string] %&#125;</span><br></pre></td></tr></table></figure><p>就表明第一个参数是图片链接，第二个参数是图片描述，而<code>download</code> 是可选参数，并且值是布尔或字符串类型。</p><details class="tag-plugin folding" ><summary><span>了解参数解析规则</span></summary><div class="body"><p>以图片标签为例，使用空格分隔开之后得到一个数组，如果图片描述文字中有空格，多分出来的这些「参数」被合并到最后一个「非键值对参数」中，什么是「非键值对参数」呢？举个例子您就明白了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/photos/183e71e0ad995.jpg 来自印度的 Rohit Vohra 使用 iPhone 12 Pro Max 拍摄。 download:https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/Apple_ShotoniPhone-rohit_vohra_12172020.zip %&#125;</span><br></pre></td></tr></table></figure><p>这个例子中，<code>download:https://xxxx</code>是有冒号分隔开的，<code>download</code>为键，后面的网址为值，所以叫做「键值对参数」；与此相对的，没有冒号分隔的就叫做「非键值对参数」。键值对参数可以放在任何位置，我可以通过匹配键来解析，而非键值对参数则只能通过顺序解析，所以它们必须和文档中要求的前后顺序一致。</p><p>一般核心的、重要的参数会设置成非键值对参数，而可选参数设置成键值对参数。</p></div></details><h2 id="文本修饰标签集">文本修饰标签集</h2><ul><li>支持多彩标记标签，包括：<mark class="tag-plugin mark" >默认</mark><mark class="tag-plugin mark" color="red">红</mark><mark class="tag-plugin mark" color="orange">橙</mark><mark class="tag-plugin mark" color="yellow">黄</mark><mark class="tag-plugin mark" color="green">绿</mark><mark class="tag-plugin mark" color="cyan">青</mark><mark class="tag-plugin mark" color="blue">蓝</mark><mark class="tag-plugin mark" color="purple">紫</mark><mark class="tag-plugin mark" color="light">浅</mark><mark class="tag-plugin mark" color="dark">深</mark>一共 10 种颜色。</li><li>这是 <psw>密码</psw> 标签</li><li>这是 <u>下划线</u> 标签</li><li>这是 <emp>着重号</emp> 标签</li><li>这是 <wavy>波浪线</wavy> 标签</li><li>这是 <del>删除线</del> 标签</li><li>这是 <sup class="tag-plugin sup" color="red">上角标</sup> 标签</li><li>这是 <sub class="tag-plugin sub" >下角标</sub> 标签</li><li>这是 <kbd>键盘样式</kbd> 标签，试一试：<kbd>⌘</kbd> +<kbd>D</kbd></li></ul><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 支持多彩标记标签，包括：&#123;% mark 默认 %&#125;&#123;% mark 红 color:red %&#125;&#123;% mark 橙 color:orange %&#125;&#123;% mark 黄 color:yellow %&#125;&#123;% mark 绿 color:green %&#125;&#123;% mark 青 color:cyan %&#125;&#123;% mark 蓝 color:blue %&#125;&#123;% mark 紫 color:purple %&#125;&#123;% mark 浅 color:light %&#125;&#123;% mark 深 color:dark %&#125; 一共 10 种颜色。</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% psw 密码 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% u 下划线 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% emp 着重号 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% wavy 波浪线 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% del 删除线 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% sup 上角标 color:red %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% sub 下角标 %&#125; 标签</span><br><span class="line"><span class="bullet">-</span> 这是 &#123;% kbd 键盘样式 %&#125; 标签，试一试：&#123;% kbd ⌘ %&#125; + &#123;% kbd D %&#125;</span><br></pre></td></tr></table></figure><h2 id="emoji表情标签">Emoji（表情标签）</h2><p>内置了可配置的表情标签<span class="tag-plugin emoji"><img no-lazy="" class="inline" src="https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/qq/爱你.gif"/></span>使用方法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% emoji 爱你 %&#125;</span><br></pre></td></tr></table></figure><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% emoji [source] name [height:1.75em] %&#125;</span><br></pre></td></tr></table></figure><p>其中 <code>source</code> 可省略，默认为配置中的第一个<code>source</code>：</p><figure class="highlight yaml"><figcaption><span>blog/_config.stellar.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="attr">emoji:</span></span><br><span class="line">    <span class="attr">default:</span> <span class="string">https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/qq/%s.gif</span></span><br><span class="line">    <span class="attr">twemoji:</span> <span class="string">https://fastly.jsdelivr.net/gh/twitter/twemoji/assets/svg/%s.svg</span></span><br><span class="line">    <span class="attr">qq:</span> <span class="string">https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/qq/%s.gif</span></span><br><span class="line">    <span class="attr">aru:</span> <span class="string">https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/%s.gif</span></span><br><span class="line">    <span class="attr">tieba:</span> <span class="string">https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%s.png</span></span><br></pre></td></tr></table></figure><div class="tag-plugin note" ><div class="body"><p>在配置文件中，文件名用 <code>%s</code>代替。这种集成方式虽然不那么优雅，但也能用，主要是配置起来比较灵活。<spanclass="tag-plugin emoji"><img no-lazy="" class="inline" src="https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0180.gif"/></span>如果对高度有特别要求，可以指定高度，例如：<spanclass="tag-plugin emoji"><img no-lazy="" class="inline" src="https://fastly.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:3em"/></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% emoji aru 5150 height:3em %&#125;</span><br></pre></td></tr></table></figure></p></div></div><blockquote><p>表情速查表：<ahref="https://www.hermitlsr.top/2021-08-02/36b0e529.html">stellar表情标签索引</a></p></blockquote><h2 id="image图片标签">Image（图片标签）</h2><p>图片标签是一个精心设计的应对各种尺寸插图的标签，对于大图，可以放置一个「下载」按钮，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image src [description] [download:bool/string] [width:px] [padding:px] [bg:hex] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">src:</span> <span class="string">图片地址</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">图片描述</span></span><br><span class="line"><span class="attr">download:</span> <span class="string">href</span> <span class="comment"># 下载地址，设置此值后鼠标放在图片上会显示下载地址，如果下载地址为图片地址，可以设置为 true</span></span><br><span class="line"><span class="attr">width:</span> <span class="string">200px</span> <span class="comment"># 图片宽度</span></span><br><span class="line"><span class="attr">padding:</span> <span class="string">16px</span> <span class="comment"># 图片四周填充宽度</span></span><br><span class="line"><span class="attr">bg:</span> <span class="string">&#x27;#ffffff&#x27;</span> <span class="comment"># 图片区域背景颜色，16进制</span></span><br></pre></td></tr></table></figure><h3 id="大尺寸图片">大尺寸图片</h3><p>无论在什么宽度的设备上都希望横向铺满的图片，一般不需要额外操作。可以在链接后面写上图片描述，如有必要，可以通过设置<code>download:true</code>使其显示一个「下载」按钮链接指向图片地址，如果下载链接与显示的图片地址不同，可以<code>download:下载链接</code> 来使其能够下载原图。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/photos/183e71e0ad995.jpg" alt="来自印度的 Rohit Vohra 使用 iPhone 12 Pro Max 拍摄。"/><a class="image-download blur" style="opacity:0" href="https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/Apple_ShotoniPhone-rohit_vohra_12172020.zip"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div><div class="image-meta"><span class="image-caption center">来自印度的 Rohit Vohra 使用 iPhone 12 Pro Max 拍摄。</span></div></div><div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/photos/bc7bda18328da.jpg" alt="来自澳大利亚的 Pieter de Vries 使用 iPhone 12 Pro Max 拍摄。"/><a class="image-download blur" style="opacity:0" href="https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/Apple_ShotoniPhone_pieter_de_vries_011221.zip"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div><div class="image-meta"><span class="image-caption center">来自澳大利亚的 Pieter de Vries 使用 iPhone 12 Pro Max 拍摄。</span></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/photos/183e71e0ad995.jpg 来自印度的 Rohit Vohra 使用 iPhone 12 Pro Max 拍摄。 download:https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/Apple<span class="emphasis">_ShotoniPhone-rohit_</span>vohra<span class="emphasis">_12172020.zip %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/photos/bc7bda18328da.jpg 来自澳大利亚的 Pieter de Vries 使用 iPhone 12 Pro Max 拍摄。 download:https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/Apple_</span>ShotoniPhone<span class="emphasis">_pieter_</span>de<span class="emphasis">_vries_</span>011221.zip %&#125;</span><br></pre></td></tr></table></figure><h3 id="小尺寸图片优化">小尺寸图片优化</h3><p>宽度较小而高度较大的图片，可以设置宽、高、填充间距、背景色等对其布局进行优化，使得它在不同宽度的屏幕下都能获得不错的视觉体验：</p><div class="tag-plugin tabs"id="tab_54""><ul class="nav-tabs"><li class="tab active"><a href="#tab_54-1">有底色的图片</a></li><li class="tab"><a href="#tab_54-2">没有底色的图片</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab_54-1"><p>有底色的图片，可以填充图片底色：</p><div class="tag-plugin image"><div class="image-bg" style="background:white;padding:16px;"><img src="https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/mirror/apple/documentation/watchkit/06d45110-1dd7-49a4-a413-9f5159ecdd0e.png" style="width:200px;"/></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/mirror/apple/documentation/watchkit/06d45110-1dd7-49a4-a413-9f5159ecdd0e.png width:200px padding:16px bg:white %&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin note"><div class="title"><strong>提示</strong></div><div class="body"><p>鼠标拖拽一下图片可以看看原图</p></div></div><details class="tag-plugin folding"><summary><span>如果不进行约束，在宽屏设备上阅读体验很糟糕（为不影响阅读体验，已为您折叠过长的内容）</span></summary><div class="body"><div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/mirror/apple/documentation/watchkit/06d45110-1dd7-49a4-a413-9f5159ecdd0e.png"/></div></div></div></details></div><div class="tab-pane" id="tab_54-2"><p>没有底色的图片，可以填充 <code>bg:var(--card)</code>动态颜色，能够适配暗黑模式：</p><div class="tag-plugin image"><div class="image-bg" style="background:var(--card);padding:16px;"><img src="https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg" style="width:100px;"/></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg bg:var(--card) padding:16px %&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="支持-fancybox-插件点击放大">支持 Fancybox 插件点击放大</h3><p>由于 Stellar 主题的插件具有按需加载的特性，所以 Fancybox插件默认也是已经配置好了的，在任意 <code>image</code> 标签中增加<code>fancybox:true</code>参数即可为特定图片开启缩放功能。如果一个页面没有任何地方使用，则不会加载Fancybox 插件。</p><div class="tag-plugin image"><div class="image-bg"><img src="https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/2022/Apple_Shot-on-iphone-macro-challenge_Cat_big.jpg.large_2x.jpg" alt="图片来自 Apple 官网" fancybox="true"/><a class="image-download blur" style="opacity:0" href="https://www.apple.com.cn/newsroom/images/product/iphone/lifestyle/2022/Images-of-Shot-on-iphone-macro-challenge.zip"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div><div class="image-meta"><span class="image-caption center">图片来自 Apple 官网</span></div></div><p>如果您希望全站所有的 <code>image</code>标签都开启此功能，可在主题配置文件中修改以下参数：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## Tag Plugins ########</span></span><br><span class="line"><span class="attr">tag_plugins:</span></span><br><span class="line">  <span class="comment"># &#123;% image %&#125;</span></span><br><span class="line">  <span class="attr">image:</span></span><br><span class="line">    <span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="quot引用标签">Quot（引用标签）</h2><p>适合居中且醒目的引用：<p class="tag-plugin quot" type="text">Stellar 是最好用的主题</p></p><p>支持自定义引号：<p class="tag-plugin quot" type="icon"><img class="icon prefix" src="https://s2.loli.net/2022/01/04/UvHcsa73jQPnobq.png" />热门话题</p></p><p>其中自定义引号素材在主题配置文件的 <code>tag_plugins.quot</code>中配置。</p><details class="tag-plugin folding" child="codeblock" open><summary><span>写法如下</span></summary><div class="body"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">适合居中且醒目的引用：&#123;% quot Stellar 是最好用的主题 %&#125;</span><br><span class="line">支持自定义引号：&#123;% quot 热门话题 icon:hashtag %&#125;</span><br></pre></td></tr></table></figure></div></details><blockquote><p>此外，加上 <code>el:h2</code> 可以作为标题使用</p></blockquote><h2 id="poetry诗词标签">Poetry（诗词标签）</h2><div class="tag-plugin poetry"><div class="title">游山西村</div><div class="meta"><span>陆游</span></div><div class="body"><p>莫笑农家腊酒浑，丰年留客足鸡豚。<strong>山重水复疑无路，柳暗花明又一村。</strong>箫鼓追随春社近，衣冠简朴古风存。 从今若许闲乘月，拄杖无时夜叩门。</p></div><div class="footer">诗词节选</div></div><details class="tag-plugin folding" child="codeblock" open><summary><span>写法如下</span></summary><div class="body"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poetry 游山西村 author:陆游 footer:诗词节选 %&#125;</span><br><span class="line">莫笑农家腊酒浑，丰年留客足鸡豚。</span><br><span class="line">**山重水复疑无路，柳暗花明又一村。**</span><br><span class="line">箫鼓追随春社近，衣冠简朴古风存。</span><br><span class="line">从今若许闲乘月，拄杖无时夜叩门。</span><br><span class="line">&#123;% endpoetry %&#125;</span><br></pre></td></tr></table></figure></div></details><h2 id="note备注标签">Note（备注标签）</h2><figure class="highlight md"><figcaption><span>note</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [title] content [color:color] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight md"><figcaption><span>block</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% grid [title] [color:color] [codeblock:bool] %&#125;</span><br><span class="line">...</span><br><span class="line">&#123;% endgrid %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">标题（可选）</span></span><br><span class="line"><span class="attr">content:</span> <span class="string">内容</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">red/orange/yellow/green/cyan/blue/purple/light/dark</span></span><br></pre></td></tr></table></figure><h3 id="彩色备注标签">彩色备注标签</h3><p>备注标签相较于旧版进行了增强，可以实现更多种颜色， note标签可以用空格隔开标题和内容。 block 标签适用于应对更复杂的场合。</p><div class="tag-plugin note" ><div class="body"><p>直接写备注内容，默认是和代码块一样的样式，如果内容中需要显示空格，请使用 代替。</p></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note 直接写备注内容，默认是和代码块一样的样式，如果内容中需要显示空格，请使用&amp;nbsp;代替。 %&#125;</span><br></pre></td></tr></table></figure><details class="tag-plugin folding" ><summary><span>更多颜色</span></summary><div class="body"><div class="tag-plugin note" color="red"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="orange"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="yellow"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="green"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="cyan"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="blue"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="purple"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="light"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><div class="tag-plugin note" color="dark"><div class="title"><strong>一共支持10种颜色，可以满足几乎所有的需求了。</strong></div><div class="body"><p>color 可设置red、orange、yellow、green、cyan、blue、purple、light、dark9种值。</p></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note color:cyan 一共支持10种颜色，可以满足几乎所有的需求了。 color 可设置 red、orange、yellow、green、cyan、blue、purple、light、dark 9种值。 %&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="具有标题的备注标签">具有标题的备注标签</h3><div class="tag-plugin note" ><div class="title"><strong>这是标题</strong></div><div class="body"><p>这是正文 哈哈。</p></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note 这是标题 这是正文 哈哈。 %&#125;</span><br></pre></td></tr></table></figure><h2 id="grid格子标签">Grid（格子标签）</h2><p>使用过 <code>noteblock</code>标签的朋友对这个新标签会比较熟悉，它是从 <code>noteblock</code>演化而来的，基础功能和 <code>noteblock</code>是一致的，后续会推出多列布局可供选择。</p><h3 id="文本内容">文本内容</h3><div class="tag-plugin note" ><div class="title"><strong>这是标题</strong></div><div class="body"><p>这是正文 哈哈。</p></div></div><div class="tag-plugin note" color="yellow"><div class="title"><strong>彩色块标题</strong></div><div class="body"><p>这是彩色块正文 啊哈哈哈。</p></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% grid 这是标题 %&#125;</span><br><span class="line">这是正文 哈哈。</span><br><span class="line">&#123;% endgrid %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% grid 彩色块标题 color:yellow %&#125;</span><br><span class="line">这是彩色块正文 啊哈哈哈。</span><br><span class="line">&#123;% endgrid %&#125;</span><br></pre></td></tr></table></figure><h3 id="彩色代码块">彩色代码块</h3><p>设置 <code>child:codeblock</code> 并设置 <code>color:颜色枚举</code>可以实现 10种不同颜色的代码块，彩色代码块一般可以用在代码正确与错误的示范对比场景。</p><div class="tag-plugin tabs"id="tab_55""><ul class="nav-tabs"><li class="tab active"><a href="#tab_55-1">效果</a></li><li class="tab"><a href="#tab_55-2">写法</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab_55-1"><p>推荐的写法：</p><div class="tag-plugin note" color="green" data-child="codeblock"><div class="body"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>不推荐的写法：</p><div class="tag-plugin note" color="red" data-child="codeblock"><div class="body"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() -&gt; <span class="type">Void</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() -&gt; () &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div></div><div class="tab-pane" id="tab_55-2"><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">推荐的写法：</span><br><span class="line"></span><br><span class="line">&#123;% grid child:codeblock color:green %&#125;</span><br><span class="line">&#123;% codeblock lang:swift %&#125;</span><br><span class="line">func test() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">&#123;% endgrid %&#125;</span><br><span class="line"></span><br><span class="line">不推荐的写法：</span><br><span class="line"></span><br><span class="line">&#123;% grid child:codeblock color:red %&#125;</span><br><span class="line">&#123;% codeblock lang:swift %&#125;</span><br><span class="line">func test() -&gt; Void &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line">// 或者</span><br><span class="line">func test() -&gt; () &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">&#123;% endgrid %&#125;</span><br></pre></td></tr></table></figure></div></div></div><h3 id="嵌套其它标签">嵌套其它标签</h3><div class="tag-plugin note" child="tabs"><div class="body"><div class="tag-plugin tabs"id="tab_56""><ul class="nav-tabs"><li class="tab active"><a href="#tab_56-1">图文示例</a></li><li class="tab"><a href="#tab_56-2">代码示例</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab_56-1"><div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/blog/2020-0627a@2x.jpg" alt="个人电脑作为办公设备时，我们该如何保护隐私？"/><a class="image-download blur" style="opacity:0" href="https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/blog/2020-0627a@2x.jpg"><svg class="icon" style="width: 1em; height: 1em;vertical-align: middle;fill: currentColor;overflow: hidden;" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3734"><path d="M561.00682908 685.55838913a111.03077546 111.03077546 0 0 1-106.8895062 0L256.23182837 487.72885783a55.96309219 55.96309219 0 0 1 79.13181253-79.18777574L450.70357448 523.88101491V181.55477937a55.96309219 55.96309219 0 0 1 111.92618438 0v344.06109173l117.07478902-117.07478901a55.96309219 55.96309219 0 0 1 79.13181252 79.18777574zM282.81429711 797.1487951h447.70473912a55.96309219 55.96309219 0 0 1 0 111.92618438H282.81429711a55.96309219 55.96309219 0 0 1 0-111.92618438z" p-id="3735"></path></svg></a></div><div class="image-meta"><spanclass="image-caption center">个人电脑作为办公设备时，我们该如何保护隐私？</span></div></div><p>公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的MacBook作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。</p></div><div class="tab-pane" id="tab_56-2"><figure class="highlight yaml"><figcaption><span>建议的版本</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Hexo:</span> <span class="number">5.4</span><span class="number">.0</span></span><br><span class="line"><span class="attr">hexo-cli:</span> <span class="number">4.2</span><span class="number">.0</span></span><br><span class="line"><span class="attr">node.js:</span> <span class="number">14.15</span><span class="number">.4</span> <span class="string">LTS</span> <span class="comment"># 建议使用LTS版本</span></span><br><span class="line"><span class="attr">npm:</span> <span class="number">6.14</span><span class="number">.10</span> <span class="string">LTS</span></span><br></pre></td></tr></table></figure></div></div></div></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% grid %&#125;</span><br><span class="line">&#123;% tabs %&#125;</span><br><span class="line">&lt;!-- tab 图文示例 --&gt;</span><br><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/blog/2020-0627a@2x.jpg 个人电脑作为办公设备时，我们该如何保护隐私？ download:true %&#125;</span><br><span class="line">公司一般都会强制安装安防软件，这些软件要求开机自启动，要求有屏幕录制权限、完全的磁盘访问权限包括相册图库。因此如果使用自己的 MacBook 作为办公设备，必须要把生活区和工作区完全独立开，安装在两个磁盘分区，并且对磁盘分区进行加密。</span><br><span class="line">&lt;!-- tab 代码示例 --&gt;</span><br><span class="line">&#123;% codeblock 建议的版本 lang:yaml %&#125;</span><br><span class="line">Hexo: 5.4.0</span><br><span class="line">hexo-cli: 4.2.0</span><br><span class="line">node.js: 14.15.4 LTS # 建议使用LTS版本</span><br><span class="line">npm: 6.14.10 LTS</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line">&#123;% endgrid %&#125;</span><br></pre></td></tr></table></figure><h2 id="folding折叠块标签">Folding（折叠块标签）</h2><p>折叠块标签的语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding title [codeblock:bool] [open:bool] [color:color] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">codeblock:</span> <span class="literal">true</span><span class="string">/false</span></span><br><span class="line"><span class="attr">open:</span> <span class="literal">true</span><span class="string">/false</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">red/orange/yellow/green/cyan/blue/purple/light/dark</span></span><br></pre></td></tr></table></figure><h3 id="彩色可折叠代码块">彩色可折叠代码块</h3><p>备注标签相较于旧版进行了增强，可以实现更多种颜色，还可以通过设置<code>child:codeblock</code>来实现可折叠的代码块。以下是一个默认打开的代码折叠框：</p><details class="tag-plugin folding" color="yellow" child="codeblock" open><summary><span>默认打开的代码折叠框</span></summary><div class="body"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">test</span>() &#123;</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p>代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding child:codeblock open:true color:yellow 默认打开的代码折叠框 %&#125;</span><br><span class="line">代码块</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><details class="tag-plugin folding" color="yellow"><summary><span>危险，请不要打开这个</span></summary><div class="body">通过设置颜色，以实现更醒目的作用，但不要滥用色彩哦～<details class="tag-plugin folding" color="orange"><summary><span>警告，真的很危险</span></summary><div class="body">通过设置颜色，以实现更醒目的作用，但不要滥用色彩哦～<details class="tag-plugin folding" color="red"><summary><span>最后一次警告，千万不要打开这个</span></summary><div class="body"><p>不要说我们没有警告过你，Windows 10不是為所有人設計，而是為每個人設計。</p></div></details></div></details></div></details><h2 id="link外链卡片标签">Link（外链卡片标签）</h2><p>外链卡片标签的语法格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link href title [description] [icon:src] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>参数说明</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">href:</span> <span class="string">链接</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">可选，副标题，不填写时默认值为链接</span></span><br><span class="line"><span class="attr">icon:</span> <span class="string">可选，缩略图链接</span></span><br></pre></td></tr></table></figure><div class="tag-plugin tabs" align="center"id="tab_57""><ul class="nav-tabs"><li class="tab"><a href="#tab_57-1">样式1</a></li><li class="tab"><a href="#tab_57-2">样式2</a></li><li class="tab"><a href="#tab_57-3">样式3</a></li><li class="tab active"><a href="#tab_57-4">样式4</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab_57-1"><div class="tag-plugin link dis-select"><a class="link-card plain" title="Stellar&nbsp;-&nbsp;每个人的独立博客" href="https://github.com/xaoxuu/hexo-theme-stellar" target="_blank" rel="external nofollow noopener noreferrer"><div class="left"><span class="title">Stellar - 每个人的独立博客</span><spanclass="desc fs12">https://github.com/xaoxuu/hexo-theme-stellar</span></div><div class="right"><div class="lazy img"data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg"></div></div></a></div></div><div class="tab-pane" id="tab_57-2"><div class="tag-plugin link dis-select"><a class="link-card plain" title="Stellar&nbsp;-&nbsp;每个人的独立博客" href="https://github.com/xaoxuu/hexo-theme-stellar" target="_blank" rel="external nofollow noopener noreferrer"><div class="left"><span class="title">Stellar - 每个人的独立博客</span><spanclass="desc fs12">https://github.com/xaoxuu/hexo-theme-stellar</span></div><div class="right"><div class="lazy img"data-bg="https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg"></div></div></a></div></div><div class="tab-pane" id="tab_57-3"><div class="tag-plugin link dis-select"><a class="link-card rich" title="Stellar&nbsp;-&nbsp;每个人的独立博客" href="https://github.com/xaoxuu/hexo-theme-stellar" target="_blank" rel="external nofollow noopener noreferrer"><div class="top"><div class="lazy img"data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg"></div><spanclass="desc fs12">https://github.com/xaoxuu/hexo-theme-stellar</span></div><div class="bottom"><span class="title">Stellar - 每个人的独立博客</span><spanclass="desc fs12">Stellar 是一个内置 wiki 系统的 hexo主题，适合综合型站点使用。同时也拥有简约而精美的视觉设计和丰富的标签插件，帮助您简单从容地应对各种场合。</span></div></a></div></div><div class="tab-pane active" id="tab_57-4"><div class="tag-plugin link dis-select"><a class="link-card rich" title="Stellar&nbsp;-&nbsp;每个人的独立博客" href="https://github.com/xaoxuu/hexo-theme-stellar" target="_blank" rel="external nofollow noopener noreferrer"><div class="top"><div class="lazy img"data-bg="https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg"></div><spanclass="desc fs12">https://github.com/xaoxuu/hexo-theme-stellar</span></div><div class="bottom"><span class="title">Stellar - 每个人的独立博客</span><spanclass="desc fs12">Stellar 是一个内置 wiki 系统的 hexo主题，适合综合型站点使用。同时也拥有简约而精美的视觉设计和丰富的标签插件，帮助您简单从容地应对各种场合。</span></div></a></div></div></div></div><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">链接 + 标题：</span><br><span class="line">&#123;% link https://github.com/xaoxuu/hexo-theme-stellar Stellar&amp;nbsp;-&amp;nbsp;每个人的独立博客 %&#125;</span><br><span class="line"></span><br><span class="line">链接 + 标题 + 图标：</span><br><span class="line">&#123;% link https://github.com/xaoxuu/hexo-theme-stellar Stellar&amp;nbsp;-&amp;nbsp;每个人的独立博客 icon:https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg %&#125;</span><br><span class="line"></span><br><span class="line">链接 + 标题 + 描述：</span><br><span class="line">&#123;% link https://github.com/xaoxuu/hexo-theme-stellar/hexo-theme-stellar Stellar&amp;nbsp;-&amp;nbsp;每个人的独立博客 Stellar 是一个内置 wiki 系统的 hexo 主题，适合综合型站点使用。同时也拥有简约而精美的视觉设计和丰富的标签插件，帮助您简单从容地应对各种场合。 %&#125;</span><br><span class="line"></span><br><span class="line">链接 + 标题 + 图标 + 描述：</span><br><span class="line">&#123;% link https://github.com/xaoxuu/hexo-theme-stellar/hexo-theme-stellar Stellar&amp;nbsp;-&amp;nbsp;每个人的独立博客 Stellar 是一个内置 wiki 系统的 hexo 主题，适合综合型站点使用。同时也拥有简约而精美的视觉设计和丰富的标签插件，帮助您简单从容地应对各种场合。 icon:https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/stellar/icon.svg %&#125;</span><br></pre></td></tr></table></figure><h2 id="copy复制标签">Copy（复制标签）</h2><p>对于单行内容，可以使用 <code>copy</code> 标签来实现复制功能：</p><div class="tag-plugin copy"><input class="copy-area" readonly id="copy_1" value="curl -s https://xaoxuu.com/install | sh"><button class="copy-btn" onclick="util.copy(&quot;copy_1&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div><p>您可以设置 <code>git:https</code> 或者 <code>git:ssh</code> 或者<code>git:gh</code> 来快速放置一个 git 仓库链接： <div class="tag-plugin copy"><input class="copy-area" readonly id="copy_2" value="https://github.com/xaoxuu.com/hexo-theme-stellar.git"><button class="copy-btn" onclick="util.copy(&quot;copy_2&quot;,&quot;Copied!&quot;)"><svg class="icon copy-btn" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M5.75 1a.75.75 0 00-.75.75v3c0 .414.336.75.75.75h4.5a.75.75 0 00.75-.75v-3a.75.75 0 00-.75-.75h-4.5zm.75 3V2.5h3V4h-3zm-2.874-.467a.75.75 0 00-.752-1.298A1.75 1.75 0 002 3.75v9.5c0 .966.784 1.75 1.75 1.75h8.5A1.75 1.75 0 0014 13.25v-9.5a1.75 1.75 0 00-.874-1.515.75.75 0 10-.752 1.298.25.25 0 01.126.217v9.5a.25.25 0 01-.25.25h-8.5a.25.25 0 01-.25-.25v-9.5a.25.25 0 01.126-.217z"></path></svg></button></div></p><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% copy curl -s https://xaoxuu.com/install | sh %&#125;</span><br><span class="line">&#123;% copy width:max curl -s https://xaoxuu.com/install | sh %&#125;</span><br><span class="line">&#123;% copy git:https xaoxuu.com/hexo-theme-stellar %&#125;</span><br><span class="line">&#123;% copy git:ssh xaoxuu.com/hexo-theme-stellar %&#125;</span><br><span class="line">&#123;% copy git:gh xaoxuu.com/hexo-theme-stellar %&#125;</span><br></pre></td></tr></table></figure><h2 id="radio单选样式标签">Radio（单选样式标签）</h2><div class="tag-plugin checkbox" ><input type="radio"/><span>没有勾选的单选框</span></div><div class="tag-plugin checkbox" ><input type="radio" checked="true"/><span>已勾选的单选框</span></div><figure class="highlight yaml"><figcaption><span>支持的参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">checked:</span> <span class="literal">true</span><span class="string">/false</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">red/orange/yellow/green/cyan/blue/purple</span></span><br></pre></td></tr></table></figure><h2 id="checkbox复选样式标签">Checkbox（复选样式标签）</h2><div class="tag-plugin checkbox" ><input type="checkbox"/><span>普通的没有勾选的复选框</span></div><div class="tag-plugin checkbox" ><input type="checkbox" checked="true"/><span>普通的已勾选的复选框</span></div><div class="tag-plugin checkbox" color="green" symbol="plus"><input type="checkbox" checked="true"/><span>显示为加号的绿色的已勾选的复选框</span></div><div class="tag-plugin checkbox" color="yellow" symbol="minus"><input type="checkbox" checked="true"/><span>显示为减号的黄色的已勾选的复选框</span></div><div class="tag-plugin checkbox" color="red" symbol="times"><input type="checkbox" checked="true"/><span>显示为乘号的红色的已勾选的复选框</span></div><figure class="highlight yaml"><figcaption><span>支持的参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">checked:</span> <span class="literal">true</span><span class="string">/false</span></span><br><span class="line"><span class="attr">color:</span> <span class="string">red/orange/yellow/green/cyan/blue/purple</span></span><br><span class="line"><span class="attr">symbol:</span> <span class="string">plus/minus/times</span></span><br></pre></td></tr></table></figure><div class="tag-plugin note" color="yellow"><div class="body"><p>由于没有提交表单的需要，所以这个标签只是样式标签，不具有真实的单选/复选功能。</p></div></div><h2 id="timeline时间线标签">Timeline（时间线标签）</h2><p>目前的时间线只支持静态的，后续有望通过 API 实现动态时间线插件。</p><div class="tag-plugin timeline"><div class="timenode" item="1"><div class="header"><p>2021 年 2 月 16 日</p></div><div class="body fs14">主要部分功能已经开发的差不多了。<div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:300px;"/></div></div></div></div><div class="timenode" item="2"><div class="header"><p>2021 年 2 月 11 日</p></div><div class="body fs14"><p>今天除夕，也是生日，一个人在外地过年+过生日，熬夜开发新主题，尽量在假期结束前放出公测版。</p></div></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline %&#125;</span><br><span class="line">&lt;!-- node 2021 年 2 月 16 日 --&gt;</span><br><span class="line">主要部分功能已经开发的差不多了。</span><br><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg width:300px %&#125;</span><br><span class="line">&lt;!-- node 2021 年 2 月 11 日 --&gt;</span><br><span class="line">今天除夕，也是生日，一个人在外地过年+过生日，熬夜开发新主题，尽量在假期结束前放出公测版。</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><h2 id="friends友链标签">Friends（友链标签）</h2><div class="tag-plugin users-wrap"></div><p>您可以在任何位置插入友链，支持静态数据和动态数据，静态数据需要写在数据文件中：</p><figure class="highlight yaml"><figcaption><span>blog/source/_data/friends.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">group1:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">海内存知己</span> <span class="string">天涯若比邻</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">感谢人生旅途中的每一份真挚的友谊，按结识先后顺序：</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">某某某</span></span><br><span class="line">      <span class="string">...</span></span><br><span class="line"><span class="comment"># 如果不需要 title 和 description，可以直接把 items 内容提升到 group 层级中，例如：</span></span><br><span class="line"><span class="attr">group2:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">某某某</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">某某某</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="comment"># 可以设置 api、repo 来显示 GitHub Issues 中的数据：</span></span><br><span class="line"><span class="attr">group3:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">来自</span> <span class="string">GitHub</span> <span class="string">的朋友</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">&#x27;以下友链通过 [GitHub Issue](https://github.com/xaoxuu/friends/issues/) 提交，按 issue 最后更新时间排序：&#x27;</span></span><br><span class="line">  <span class="attr">api:</span> <span class="string">https://issues-api.vercel.app</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">xaoxuu/friends</span></span><br></pre></td></tr></table></figure><p>标题和描述都支持 md 格式，需要写在引号中。如果指定了 <code>api</code>和 <code>repo</code> 字段，则从 issues 中取第一个 <code>json</code>代码块数据作为友链。</p><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% friends %&#125;</span><br></pre></td></tr></table></figure><h3 id="数据按组筛选">数据按组筛选</h3><p>友链支持分组（白名单模式和黑名单模式）显示：</p><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 显示 group1</span><br><span class="line">&#123;% friends only:group1 %&#125;</span><br><span class="line"></span><br><span class="line">// 显示 group1 和 group2</span><br><span class="line">&#123;% friends only:group1,group2 %&#125;</span><br><span class="line"></span><br><span class="line">// 除了 group2 别的都显示</span><br><span class="line">&#123;% friends not:group2 %&#125;</span><br></pre></td></tr></table></figure><h3 id="实现动态友链">实现动态友链</h3><p>可以加载来自 issues 的友链数据，除了需要在<code>_data/friends.yml</code> 中指定 <code>api</code> 和<code>repo</code> 外，还需要做一下几件事：</p><p>从 <ahref="https://github.com/xaoxuu/issues-api">xaoxuu/issues-api</a>作为模板克隆或者 fork 仓库，然后提交一个 issue进行测试，不出意外的话，仓库中已经配置好了 issue模板，只需要在模板中指定的位置填写信息就可以了。</p><p>提交完 issue 一分钟左右，如果仓库中出现了 <code>output</code>分支提交，可以点击查看一下文件内容是否已经包含了刚刚提交的 issue中的数据，如果包含，那么再次回到前端页面刷新就可以看到来自 issue的友链数据了。</p><div class="tag-plugin note" ><div class="title"><strong>关于自建&nbsp;Vercel&nbsp;API</strong></div><div class="body"><p>如果您想使用自己的 api，请把您刚创建的仓库导入到 Vercel 项目，详见 <ahref="https://zfe.space/post/python-issues-api.html">小冰博客</a>的教程。</p></div></div><div class="tag-plugin note" color="green"><div class="title"><strong>特别感谢</strong></div><div class="body"><p>特别感谢小冰博客通过 Vercel 进行加速的方案，解决了原本直接请求 GitHubAPI 速度过慢的问题。</p></div></div><h3 id="只显示动态数据">只显示动态数据</h3><p>如果您不想创建 <code>friends.yml</code>来设置任何静态数据，可以在标签中设置 <code>repo</code>来只显示动态数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% friends repo:xaoxuu/friends %&#125;</span><br></pre></td></tr></table></figure><p>当然，如果您自己部署了 API 接口，可以指定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% friends repo:xaoxuu/friends api:https://issues-api.vercel.app %&#125;</span><br></pre></td></tr></table></figure><h2 id="sites网站卡片标签">Sites（网站卡片标签）</h2><div class="tag-plugin sites-wrap"></div><p>网站卡片可以显示网站截图、logo、标题、描述，使用方法和友链标签一模一样，唯一的区别是数据文件名称为<code>sites.yml</code>，可以和友链数据混用，通过分组过滤实现不一样的效果。</p><figure class="highlight md"><figcaption><span>示例写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sites only:mac %&#125;</span><br></pre></td></tr></table></figure><details class="tag-plugin folding" ><summary><span>sites only:mac</span></summary><div class="body"><div class="tag-plugin sites-wrap"></div></div></details><h2 id="github-cardgithub卡片标签">GitHub Card（GitHub卡片标签）</h2><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu"><img src="https://github-readme-stats.vercel.app/api/?username=xaoxuu&&show_owner=true"/></a></div><div class="tag-plugin ghcard"><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/xaoxuu/hexo-theme-stellar"><img src="https://github-readme-stats.vercel.app/api/pin/?username=xaoxuu&repo=hexo-theme-stellar&theme=dark&show_owner=true"/></a></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard xaoxuu %&#125;</span><br><span class="line">&#123;% ghcard xaoxuu/hexo-theme-stellar theme:dark %&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin link dis-select"><a class="link-card plain" title="GitHub&nbsp;Card&nbsp;API" href="https://github.com/anuraghazra/github-readme-stats" target="_blank" rel="external nofollow noopener noreferrer"><div class="left"><span class="title">GitHub&nbsp;Card&nbsp;API</span><span class="desc fs12">https://github.com/anuraghazra/github-readme-stats</span></div><div class="right"><div class="lazy img" data-bg="https://fastly.jsdelivr.net/gh/cdn-x/placeholder@1.0.1/link/8f277b4ee0ecd.svg"></div></div></a></div><h2 id="navbar导航栏标签">Navbar（导航栏标签）</h2><p>文章内也可以插入一个导航栏：</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% navbar [<span class="string">文章</span>](<span class="link">/</span>) [<span class="string">项目</span>](<span class="link">/wiki/</span>) [<span class="string">留言</span>](<span class="link">#comments</span>) [<span class="string">GitHub</span>](<span class="link">https://github.com/xaoxuu/</span>) %&#125;</span><br></pre></td></tr></table></figure><div class="tag-plugin navbar"><nav class="cap"><a href="/">文章</a><a href="/wiki/">项目</a><a href="#comments">留言</a><a href="https://github.com/xaoxuu/">GitHub</a></nav></div><h2 id="about关于标签">About（关于标签）</h2><p>方便在关于页面显示一段图文信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;% about avatar:https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/avatar/rect-256@2x.png height:80px %&#125;</span><br><span class="line"></span><br><span class="line">&lt;img height=&quot;32px&quot; alt=&quot;XAOXUU&quot; src=&quot;https://fastly.jsdelivr.net/gh/cdn-x/xaoxuu/logo/180x30@2x.png&quot;&gt;</span><br><span class="line"></span><br><span class="line">**如果宇宙中真有什么终极的逻辑，那就是我们终有一天会在舰桥上重逢，直到生命终结。**</span><br><span class="line"></span><br><span class="line">XAOXUU 目前是一个 iOS 开发者，代表作品有：ProHUD、ValueX 等。在业余时间也开发了 Stellar 博客主题，更多的作品可以去项目主页查看，希望大家喜欢～</span><br><span class="line"></span><br><span class="line">&#123;% navbar [文章](/) [项目](/wiki/) [留言](#comments) [GitHub](https://github.com/xaoxuu/) %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endabout %&#125;</span><br></pre></td></tr></table></figure><h2 id="frame设备框架标签">Frame（设备框架标签）</h2><div class="tag-plugin video-wrap"><div class="frame-wrap" id="iphone11"focus="top"><video poster="https://fastly.jsdelivr.net/gh/cdn-x/wiki/prohud/docs/toast-loading@2x.jpg" playsinline="" muted="" loop="" autoplay="" preload="metadata"><source src="https://fastly.jsdelivr.net/gh/cdn-x/wiki/prohud/docs/toast-loading@2x.mov" type="video/mp4"></video><div class="frame"></div></div></div><figure class="highlight md"><figcaption><span>示例写法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% frame iphone11 img:https://fastly.jsdelivr.net/gh/cdn-x/wiki/prohud/docs/toast-loading@2x.jpg video:https://fastly.jsdelivr.net/gh/cdn-x/wiki/prohud/docs/toast-loading@2x.mov focus:top %&#125;</span><br></pre></td></tr></table></figure><p>目前仅支持 iphone11 如果您有 iPhone12、iPad、Mac 等设备模型的 svg图片，可以发给我进行适配。</p><h2 id="tabs分栏标签">Tabs（分栏标签）</h2><p>这个标签移植自 <ahref="https://theme-next.js.org/docs/tag-plugins/tabs.html">NexT</a>主题，但做了以下修改：</p><ul><li>支持设置 <code>align:center</code> 来使内容居中</li><li>设置默认激活的标签方式为 <code>active:1</code> 而非 <code>,1</code>（使用默认格式降低学习成本，且显式声明可读性更强）</li><li>不需要 <code>&lt;!-- endtab --&gt;</code> 来作为结束标识（因为Stellar 会自动判断）</li><li>不需要 <code>tabs id</code> 来保证唯一性（因为 Stellar会设置唯一标识）</li><li>不支持 <code>@icon</code> 方式设置图标（因为 Stellar 不再内置<code>fontawesome</code> 图标库）</li><li>暂时不支持 <code>md</code>格式的代码块，这是技术问题，有待解决。</li></ul><div class="tag-plugin tabs" align="center"id="tab_58""><ul class="nav-tabs"><li class="tab"><a href="#tab_58-1">图片</a></li><li class="tab active"><a href="#tab_58-2">代码块</a></li><li class="tab"><a href="#tab_58-3">表格</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab_58-1"><div class="tag-plugin image"><div class="image-bg"><img src="https://fastly.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:300px;"/></div></div></div><div class="tab-pane active" id="tab_58-2"><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x <span class="operator">=</span> <span class="number">123</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="tab_58-3"><table><thead><tr class="header"><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr class="odd"><td>a1</td><td>b1</td><td>c1</td></tr><tr class="even"><td>a2</td><td>b2</td><td>c2</td></tr></tbody></table></div></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs active:2 align:center %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 图片 --&gt;</span><br><span class="line">&#123;% image https://fastly.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg width:300px %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 代码块 --&gt;</span><br><span class="line">&#123;% codeblock lang:swift %&#125;</span><br><span class="line">let x = 123</span><br><span class="line">print(&quot;hello world&quot;)</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 表格 --&gt;</span><br><span class="line">| a | b | c |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">| a1 | b1 | c1 |</span><br><span class="line">| a2 | b2 | c2 |</span><br><span class="line"></span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><h2 id="swiper轮播标签">Swiper（轮播标签）</h2><p>默认一张图片是 50% 宽度，通过设置 <code>width:min</code> 设置为 25%宽度，<code>width:max</code> 设置为 100% 宽度。</p><h3 id="最大图片宽度">最大图片宽度</h3><div class="tag-plugin swiper-container" id="swiper-api" width="max"><div class="swiper-wrapper"></div><div class="swiper-pagination"></div><div class="swiper-button-prev blur"></div><div class="swiper-button-next blur"></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% swiper width:max %&#125;</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot11.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot12.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot13.png</span>)</span><br><span class="line">&#123;% endswiper %&#125;</span><br></pre></td></tr></table></figure><h3 id="最小图片宽度">最小图片宽度</h3><div class="tag-plugin swiper-container" id="swiper-api" width="min"><div class="swiper-wrapper"></div><div class="swiper-pagination"></div><div class="swiper-button-prev blur"></div><div class="swiper-button-next blur"></div></div><figure class="highlight md"><figcaption><span>写法如下</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% swiper width:min %&#125;</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot01.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot02.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot03.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot04.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot05.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot06.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot07.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot08.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot09.png</span>)</span><br><span class="line">![](<span class="link">https://fastly.jsdelivr.net/gh/cdn-x/wiki@1.0.2/prohud/screenshot10.png</span>)</span><br><span class="line">&#123;% endswiper %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very
first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
